services:
  ecosensor-db:
    container_name: ecosensor-db
    image: ghcr.io/emp-projects/docker-postgis:main
    profiles: ["all", "db", "be", "stack"]
    env_file:
      - .env.database
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      PGPORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_INITDB_ARGS: "-c shared_buffers=1GB -c work_mem=50MB -c maintenance_work_mem=10GB -c autovacuum_work_mem=2GB -c wal_level=minimal -c checkpoint_completion_target=0.9 -c max_wal_senders=0 -c random_page_cost=1.0"
    ports:
      - ${POSTGRES_PORT}:5432
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_PASS} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p 5432"
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 1m
    restart: on-failure
    networks:
      - ecosensor-network
    volumes:
      - ./ecosensor-data/db:/var/lib/postgresql

  # https://hub.docker.com/r/postgis/postgis/
  ecosensor-osm2pg-db:
    container_name: ecosensor-osm2pg-db
    image: postgis/postgis:16-3.4
    profiles: ["all", "db", "be", "stack"]
    env_file:
      - .env.osm2pgsql
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      PGPORT: 5433
      POSTGRES_DB: ${POSTGRES_OSM_DB}
      POSTGRES_USER: ${POSTGRES_OSM_USER}
      POSTGRES_PASSWORD: ${POSTGRES_OSM_PASS}
      POSTGRES_INITDB_ARGS: "-c shared_buffers=1GB -c work_mem=50MB -c maintenance_work_mem=10GB -c autovacuum_work_mem=2GB -c wal_level=minimal -c checkpoint_completion_target=0.9 -c max_wal_senders=0 -c random_page_cost=1.0"
    ports:
      - ${POSTGRES_OSM_PORT}:5433
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_OSM_PASS} pg_isready -h 127.0.0.1 -U ${POSTGRES_OSM_USER} -d ${POSTGRES_OSM_DB} -p 5433"
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 1m
    restart: on-failure
    networks:
      - ecosensor-network
    volumes:
      - ./osm-data/db:/var/lib/postgresql
  
  ecosensor-osm2pgsql:
    container_name: ecosensor-osm2pgsql
    image: ghcr.io/emp-projects/docker-osm2pgsql:main
    profiles: ["all", "db", "be", "osm", "stack"]
    env_file:
      - .env.osm2pgsql
    depends_on:
      ecosensor-osm2pg-db:
        condition: service_healthy
    restart: always
    environment:
      PGHOST: ecosensor-osm2pg-db
      PGDATABASE: ${POSTGRES_OSM_DB}
      PGUSER: ${POSTGRES_OSM_USER}
      PGPASSWORD: ${POSTGRES_OSM_PASS}
      PGPORT: ${POSTGRES_OSM_PORT}
    volumes:
      - ./osm-data/osm:/osm
    networks:
      - ecosensor-network

  ecosensor-open-meteo-api:
    image: ghcr.io/open-meteo/open-meteo
    container_name: ecosensor-openmeteo-api
    env_file:
      - .env.openmeteo
    profiles: ["all", "db", "be", "openmeteo", "stack"]
    ports:
      - ${OPEN_METEO_PORT}:8080
    command: serve
    volumes:
      - ./openmeteo-data/openmeteo:/app/data
    restart: always
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}

  ecosensor-open-meteo-sync:
    image: ghcr.io/open-meteo/open-meteo
    container_name: ecosensor-openmeteo-sync
    env_file:
      - .env.openmeteo
    profiles: ["all", "db", "be", "openmeteo", "stack"]
    command: sync ${OPEN_METEO_MODELS} ${OPEN_METEO_VARIABLES} --past-days ${OPEN_METEO_MAX_AGE_DAYS} --repeat-interval ${OPEN_METEO_REPEAT_INTERVAL} --concurrent ${OPEN_METEO_CONCURRENT}
    volumes:
      - ./openmeteo-data/openmeteo:/app/data
    restart: always
    networks:
      - ecosensor-network
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}

  ecosensor-backend:
    container_name: ecosensor-backend
    image: ${REGISTRY}/ecosensor-be:${ECR_ENV}latest
    profiles: ["all", "be"]
    restart: always
    env_file:
      - .env.database
      - .env.docker
      - .env.openmeteo
      - .env.backend
      - .env.osm2pgsql
    ports:
      - ${ECOSENSOR_PORT}:80
    depends_on:
      ecosensor-db:
        condition: service_healthy
    networks:
      - ecosensor-network

networks:
  ecosensor-network:
    name: ecosensor
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.60.0/24

volumes:
  db:
    driver: local
